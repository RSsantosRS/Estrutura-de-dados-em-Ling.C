#include <stdio.h>
#include <stdlib.h>

typedef struct arvoreBinaria {
    int elem;
    struct arvoreBinaria *dir, *esq;
} arvoreBinaria;

arvoreBinaria* insere(arvoreBinaria *a, int el);
arvoreBinaria* remover(arvoreBinaria *a, int el);
void preOrdem(arvoreBinaria *a);
void emOrdem(arvoreBinaria *a);
void posOrdem(arvoreBinaria *a);

int main() {
    arvoreBinaria *raiz = NULL;
    int x;
    char op;

    do {
        printf("\nMenu:\n");
        printf("1 - Inserir\n");
        printf("2 - Excluir\n");
        printf("3 - Pre-Ordem\n");
        printf("4 - Em Ordem\n");
        printf("5 - Pos-Ordem\n");
        printf("6 - Sair\n");
        printf("Escolha uma opcao: ");
        
        // Limpa o buffer de entrada e lê a opção
        scanf(" %c", &op);
        
        switch (op) {
            case '1':
                printf("Valor a inserir: ");
                scanf("%d", &x);
                raiz = insere(raiz, x);
                break;
                
            case '2':
                if (raiz != NULL) {
                    printf("Valor a excluir: ");
                    scanf("%d", &x);
                    raiz = remover(raiz, x);
                } else {
                    printf("Arvore vazia.\n");
                }
                break;
                
            case '3':
                printf("Pre-Ordem: ");
                preOrdem(raiz);
                printf("\n");
                break;
                
            case '4':
                printf("Em Ordem: ");
                emOrdem(raiz);
                printf("\n");
                break;
                
            case '5':
                printf("Pos-Ordem: ");
                posOrdem(raiz);
                printf("\n");
                break;
                
            case '6':
                printf("Saindo...\n");
                break;
                
            default:
                printf("Opcao invalida.\n");
        }
    } while (op != '6');

    return 0;
}

arvoreBinaria* insere(arvoreBinaria *a, int el) {
    if (a == NULL) {
        a = (arvoreBinaria*)malloc(sizeof(arvoreBinaria));
        a->elem = el;
        a->esq = NULL;
        a->dir = NULL;
        printf("Elemento %d inserido.\n", el);
    } else {
        if (el <= a->elem)
            a->esq = insere(a->esq, el);
        else
            a->dir = insere(a->dir, el);
    }
    return a;
}

arvoreBinaria *remover(arvoreBinaria *a, int el) {
    arvoreBinaria *p, *p2;
    if (a == NULL) {
        printf("Elemento nao encontrado.\n");
        return NULL;
    }
    if (a->elem == el) {
        if (a->esq == a->dir) { // remoção de folha
            free(a);
            return NULL;
        } else if (a->esq == NULL) { // filho à direita
            p = a->dir;
            free(a);
            return p;
        } else if (a->dir == NULL) { // filho à esquerda
            p = a->esq;
            free(a);
            return p;
        } else { // tem dois filhos
            p2 = a->dir;
            p = a->dir;
            while (p->esq != NULL) p = p->esq;
            p->esq = a->esq;
            free(a);
            return p2;
        }
    } else if (a->elem < el) {
        a->dir = remover(a->dir, el);
    } else {
        a->esq = remover(a->esq, el);
    }
    return a;
}

void preOrdem(arvoreBinaria *a) {
    if (a != NULL) {
        printf("%d ", a->elem);
        preOrdem(a->esq);
        preOrdem(a->dir);
    }
}

void emOrdem(arvoreBinaria *a) {
    if (a != NULL) {
        emOrdem(a->esq);
        printf("%d ", a->elem);
        emOrdem(a->dir);
    }
}

void posOrdem(arvoreBinaria *a) {
    if (a != NULL) {
        posOrdem(a->esq);
        posOrdem(a->dir);
        printf("%d ", a->elem);
    }
}
